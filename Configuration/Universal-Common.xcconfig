//
// This file defines common settings that should be enabled for every new
// project or target.
//
// This should be considered platform independent.
//

// Our current shipping targets for the various platforms.
IPHONEOS_DEPLOYMENT_TARGET = 12.0
MACOSX_DEPLOYMENT_TARGET = 10.14
WATCHOS_DEPLOYMENT_TARGET = 5.0
TVOS_DEPLOYMENT_TARGET = 12.0

// The current version of Swift we support.
SWIFT_VERSION = 5.0

// Architectures to build. Default to standard.
ARCHS = $(ARCHS_STANDARD)

// We need this so that we can actually get debugging symbols when using Instruments.
DEBUG_INFORMATION_FORMAT = dwarf-with-dsym

// Whether to strip debugging symbols when copying resources (like included
// binaries)
//
// Since all of our sub-project frameworks are code-signed there's nothing we
// can strip without invalidating the signing signature, so default to NO.
COPY_PHASE_STRIP = NO

// Disable legacy-compatible header searching
ALWAYS_SEARCH_USER_PATHS = NO

// Allow module imports.
CLANG_ENABLE_MODULES = YES

// Allow module defines.
DEFINES_MODULE = YES

// We support ARC everywhere.
CLANG_ENABLE_OBJC_ARC = YES

// By default we don't want Testability enabled.
ENABLE_TESTABILITY = NO

// The compilation mode (singlefile, wholemodule) to use for generating a Swift binary or framework
// As of Swift 4.1, this is independent of SWIFT_OPTIMIZATION_LEVEL.
// More Info: https://swift.org/blog/whole-module-optimizations/
SWIFT_COMPILATION_MODE = wholemodule

// Warn if there are deprecated functions being called.
GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS = YES

// Warn whenever a local variable shadows another variable.
GCC_WARN_SHADOW = YES

// Causes warnings to be emitted about missing prototypes.
GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES

// Warn whenever a static function is declared but not defined or a noninline static function is unused.
GCC_WARN_UNUSED_FUNCTION = YES

// Warn if we try to reference an undeclared selector.
GCC_WARN_UNDECLARED_SELECTOR = YES

// Warn if we are implicitly capturing self in Objective-C code.
CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES

// Warn if an Objective-C class either subclasses a deprecated class or overrides a method that has been marked deprecated.
CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES

// Check for misuses of `nonnull` parameter and return types.
CLANG_ANALYZER_NONNULL = YES

// Warn if we try to use a variable without initializing it.
GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE

// Causes warnings to be emitted when a function with a defined return type (not `void`) contains a return statement without a return-value.
GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR

// Warn if an API that is newer than the deployment target is used without "if (@available(...))" guards.
CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE

// Warn when we try to compare a number object with a primitive type.
CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE

// Warn when a string that should be localized isn't.
CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES

// Warn about block captures of implicitly autoreleasing parameters.
CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES

// Warn about implicit conversions to boolean values that are suspicious.
CLANG_WARN_BOOL_CONVERSION = YES

// Warn about suspicious uses of the comma operator.
CLANG_WARN_COMMA = YES

// Warn about implicit conversions of constant values that cause the constant value to change.
CLANG_WARN_CONSTANT_CONVERSION = YES

// Warn about loop bodies that are suspiciously empty.
CLANG_WARN_EMPTY_BODY = YES

// Warn about implicit conversions between different kinds of enum values.
CLANG_WARN_ENUM_CONVERSION = YES

// Warn if all paths through a function call itself.
CLANG_WARN_INFINITE_RECURSION = YES

// Warn about implicit conversions between pointers and integers.
CLANG_WARN_INT_CONVERSION = YES

// Warn about non-literal expressions that evaluate to zero being treated as a null pointer.
CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES

// Warn about implicit conversions from Objective-C literals to values of incompatible type.
CLANG_WARN_OBJC_LITERAL_CONVERSION = YES

// Warn about ranged-based for loops.
CLANG_WARN_RANGE_LOOP_ANALYSIS = YES

// Warn about non-prototype declarations.
CLANG_WARN_STRICT_PROTOTYPES = YES

// Warn about non-prototype declarations.
CLANG_WARN_SUSPICIOUS_MOVE = YES

// Warns about potentially unreachable code.
CLANG_WARN_UNREACHABLE_CODE = YES

// Warn about declaring the same method more than once within the same `@interface`.
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES

// Controls whether `objc_msgSend` calls must be cast to the appropriate function pointer type before being called.
ENABLE_STRICT_OBJC_MSGSEND = YES

// GCC Ass Covering.
GCC_NO_COMMON_BLOCKS = YES

// Warn if a value is implicitly converted from a 64-bit type to a 32-bit type.
GCC_WARN_64_TO_32_BIT_CONVERSION = YES

// Warn if there is a variable declared but never used.
GCC_WARN_UNUSED_VARIABLE = YES

// Default to Apple Generic Versioning
VERSIONING_SYSTEM = apple-generic

// Enable hardenened runtime support for macOS.
ENABLE_HARDENED_RUNTIME[sdk=macosx*] = YES

//================================
// JWW Specific Settings
//================================

// iOS specific LD_RUNPATH_SEARCH_PATHS to avoid duplication.
JWW_IOS_LD_RUNPATH_SEARCH_PATHS = '@executable_path/Frameworks' '@loader_path/Frameworks'

// macOS specific LD_RUNPATH_SEARCH_PATHS to avoid duplication.
JWW_MACOS_LD_RUNPATH_SEARCH_PATHS = '@executable_path/../Frameworks' '@loader_path/../Frameworks'

